'''
중간값은 통계 집단의 수치를 크기 순으로 배열 했을 때 전체의 중앙에 위치하는 수치를 뜻한다.
입력으로 N 개의 점수가 주어졌을 때, 중간값을 출력하라.

예제 : N이 9이고, 9개의 점수가 아래와 같이 주어질 경우,
85 72 38 80 69 65 68 96 22
69가 중간값이 된다.

제약 사항 
    1. N은 항상 홀수로 주어진다.
    2. N은 9이상 199 이하의 정수이다. (9 <= N <)

입력
    입력은 첫 줄에 N이 주어진다.
    둘째 줄에 N개의 점수가 주어진다.

출력
    N개의 점수들 중, 중간값에 해당하는 점수를 정답으로 출력한다.

'''

'''
1. N은 항상 홀수니까, N // 2로 몫을 구하면, 크기순으로 나열했을 때, 몫 + 1번째의 수가 중간값이다.
    ex) N이 9이면, N // 2 = 4, 4+1 = 5 크기를 오름차순(또는 내림차순)으로 나열했을 때 5번째의 수 = 69가 중간값이다.
        정리하자면
    1.1 N//2 + 1 구하기

    1.2 정수들 리스트에 저장하여 오름차순(또는 내림차순)으로 나열하기

    1.3 정렬한 리스트의 (N//2 + 1번째의 수) 출력

'''

import sys
sys.stdin = open("inputs/D1_중간값_찾기_input.txt", "r")  # 표준 입력(키보드) 대신 input.txt 읽겠다.



count = int(input())
num_list = list(map(int, input().split()))

middle = (count//2)  # !!! middle을 index로 쓸것이기 때문에 0부터 시작하는것 주의 주의

# list의 원소들을 오름차순(또는 내림차순)으로 정렬
# 5,3,4,2,8 을 예시로 생각해보자.
# 오름차순으로 정렬하기 위해서는, 앞에서 부터 순서대로 다음 정수와 비교하여, 
# 더 큰 수를 뒤로 보내는걸 계속 반복?
# 3, 4, 2, 5, 8 이 되어서 2가 문제 이걸 그냥 정렬해주는 함수도 찾으면 있을것 같긴한데 일단 내가 해보자
# 이 똑같은 함수를 리스트 길이만큼 반복하면 되지않나? while사용?


for j in range(len(num_list)) :     # list 길이만큼 반복
    for i in range(len(num_list) - 1) :    # 위의 예시를 사용하면 리스트의 길이는 5, 그걸 1빼면 4, 그걸 range로 하면 0~3 4개
        if num_list[i] > num_list[i+1] :   # len(num_list -1 ) 1 안빼면 i+1의 인덱스가 마지막에서 존재하지 않아서 오류
            m = num_list[i] 
            num_list[i] = num_list[i+1] 
            num_list[i+1] = m

print(num_list[middle])


